# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, config, ... }:
with lib;
let
  cfg = config.nixosModules.docker.wallos;

  ip = config.nixosModules.info.system.ips.local;
in {
  options.nixosModules.docker.wallos = {
    enable = mkEnableOption "Wallos";

    port = mkOption {
      type = types.port;
      default = 41080;
    };

    description = mkOption {
      type = types.string;
      default = "Subscription Manager";
    };

    url = mkOption {
      type = types.string;
      default = "http://${ip}:${toString cfg.port}";
    };

    furl = mkOption {
      type = types.string;
      default = "https://wallos.${config.nixosModules.reverseProxy.domain}";
    };

    icon = mkOption {
      type = types.string;
      default = "wallos.svg";
    };
  };

  config = mkIf cfg.enable {
    # Containers
    virtualisation.oci-containers.containers."wallos" = {
      image = "bellamy/wallos:latest";
      environment = {
        "TZ" = "America/Toronto";
      };

      volumes = [
        # "/nixdots/nixos/nixosModules/docker/wallos/db:/var/www/html/db:rw"
        # "/nixdots/nixos/nixosModules/docker/wallos/logos:/var/www/html/images/uploads/logos:rw"
        "wallos_db:/var/www/html/db:rw"
        "wallos_logos:/var/www/html/images/uploads/logos:rw"
      ];

      ports = [
        # "8282:80/tcp"
        "${ip}:${toString cfg.port}:80/tcp"
      ];

      log-driver = "journald";
      extraOptions = [
        "--network-alias=wallos"
        "--network=wallos_default"
      ];
    };

    systemd.services."docker-volume-wallos_db" = {
      path = [ pkgs.docker ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
      };

      script = ''
        docker volume inspect wallos_db || docker volume create wallos_db
      '';

      partOf = [ "docker-compose-wallos-root.target" ];
      wantedBy = [ "docker-compose-wallos-root.target" ];
    };

    systemd.services."docker-volume-wallos_logos" = {
      path = [ pkgs.docker ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
      };

      script = ''
        docker volume inspect wallos_logos || docker volume create wallos_logos
      '';

      partOf = [ "docker-compose-wallos-root.target" ];
      wantedBy = [ "docker-compose-wallos-root.target" ];
    };

    systemd.services."docker-wallos" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
        RestartMaxDelaySec = lib.mkOverride 90 "1m";
        RestartSec = lib.mkOverride 90 "100ms";
        RestartSteps = lib.mkOverride 90 9;
      };

      after = [
        "docker-network-wallos_default.service"
        "docker-volume-wallos_db.service"
        "docker-volume-wallos_logos.service"
      ];

      requires = [
        "docker-network-wallos_default.service"
        "docker-volume-wallos_db.service"
        "docker-volume-wallos_logos.service"
      ];

      partOf = [
        "docker-compose-wallos-root.target"
      ];

      wantedBy = [
        "docker-compose-wallos-root.target"
      ];
    };

    # Networks
    systemd.services."docker-network-wallos_default" = {
      path = [ pkgs.docker ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "docker network rm -f wallos_default";
      };

      script = ''
        docker network inspect wallos_default || docker network create wallos_default
      '';

      partOf = [ "docker-compose-wallos-root.target" ];
      wantedBy = [ "docker-compose-wallos-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."docker-compose-wallos-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };

      wantedBy = [ "multi-user.target" ];
    };
  };
}
