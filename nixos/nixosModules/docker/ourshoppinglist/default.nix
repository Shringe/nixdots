# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, config, ... }:
with lib;
let
  cfg = config.nixosModules.docker.ourshoppinglist;
in {
  options.nixosModules.docker.ourshoppinglist = {
    enable = mkEnableOption "Ourshoppinglist";

    port = mkOption {
      type = types.port;
      default = 41060;
    };

    description = mkOption {
      type = types.string;
      default = "Simple Collaborative Todo App";
    };

    url = mkOption {
      type = types.string;
      default = "http://${config.nixosModules.info.system.ips.local}:${toString cfg.port}";
    };

    furl = mkOption {
      type = types.string;
      default = "https://ourshoppinglist.${config.nixosModules.reverseProxy.domain}";
    };

    icon = mkOption {
      type = types.string;
      default = "ourshoppinglist.svg";
    };
  };

  config = mkIf cfg.enable {
    # Containers
    virtualisation.oci-containers.containers."ourshoppinglist-app" = {
      image = "ourshoppinglist/our-shopping-list:latest";
      environment = {
        "VUE_APP_I18N_FALLBACK_LOCALE" = "en";
        "VUE_APP_I18N_FORCE_LOCALE" = "0";
        "VUE_APP_I18N_LOCALE" = "en";
        "VUE_APP_SINGLEBOARD_MODE" = "0";
      };

      ports = [
        "${toString cfg.port}:8080/tcp"
      ];

      dependsOn = [
        "ourshoppinglist-mongodb"
      ];

      log-driver = "journald";
      extraOptions = [
        "--network-alias=app"
        "--network=ourshoppinglist_default"
      ];
    };

    systemd.services."docker-ourshoppinglist-app" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
        RestartMaxDelaySec = lib.mkOverride 90 "1m";
        RestartSec = lib.mkOverride 90 "100ms";
        RestartSteps = lib.mkOverride 90 9;
      };

      after = [
        "docker-network-ourshoppinglist_default.service"
      ];

      requires = [
        "docker-network-ourshoppinglist_default.service"
      ];

      partOf = [
        "docker-compose-ourshoppinglist-root.target"
      ];

      wantedBy = [
        "docker-compose-ourshoppinglist-root.target"
      ];
    };

    virtualisation.oci-containers.containers."ourshoppinglist-mongodb" = {
      image = "mongo:7";
      volumes = [
        "ourshoppinglist_dbdata:/data/db:rw"
      ];

      log-driver = "journald";
      extraOptions = [
        "--network-alias=mongodb"
        "--network=ourshoppinglist_default"
      ];
    };

    systemd.services."docker-ourshoppinglist-mongodb" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "no";
      };

      after = [
        "docker-network-ourshoppinglist_default.service"
        "docker-volume-ourshoppinglist_dbdata.service"
      ];

      requires = [
        "docker-network-ourshoppinglist_default.service"
        "docker-volume-ourshoppinglist_dbdata.service"
      ];

      partOf = [
        "docker-compose-ourshoppinglist-root.target"
      ];

      wantedBy = [
        "docker-compose-ourshoppinglist-root.target"
      ];
    };

    # Networks
    systemd.services."docker-network-ourshoppinglist_default" = {
      path = [ pkgs.docker ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "docker network rm -f ourshoppinglist_default";
      };

      script = ''
        docker network inspect ourshoppinglist_default || docker network create ourshoppinglist_default
      '';

      partOf = [ "docker-compose-ourshoppinglist-root.target" ];
      wantedBy = [ "docker-compose-ourshoppinglist-root.target" ];
    };

    # Volumes
    systemd.services."docker-volume-ourshoppinglist_dbdata" = {
      path = [ pkgs.docker ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
      };

      script = ''
        docker volume inspect ourshoppinglist_dbdata || docker volume create ourshoppinglist_dbdata
      '';

      partOf = [ "docker-compose-ourshoppinglist-root.target" ];
      wantedBy = [ "docker-compose-ourshoppinglist-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."docker-compose-ourshoppinglist-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };

      wantedBy = [ "multi-user.target" ];
    };
  };
}
